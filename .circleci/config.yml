version: 2
# The CircleCI version.

jobs:
  test:
    docker:
      - image: circleci/node:10-stretch
    working_directory: ~/repo/magiccap
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          key: linux-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install MagicCap's dependencies
          command: npm i
      - save_cache:
          key: linux-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - "node_modules"
      - run:
          name: Lint MagicCap
          command: npm run lint
  # The main test for all builds.

  linuxbuild:
    docker:
      - image: circleci/node:10-stretch
    working_directory: ~/repo/magiccap
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          key: linux-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install MagicCap's dependencies
          command: npm i
      - save_cache:
          key: linux-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - "node_modules"
      - run:
          name: Build MagicCap for Linux
          command: npm run linuxcompile
      - run:
          name: Create a MagicCap Linux zip
          command: cd ./build/MagicCap-linux-x64 && zip -r ./magiccap-linux.zip . && cd ../..
      - run:
          name: Install the AWS CLI.
          command: apt install -y python-pip && pip install awscli
      - run:
          name: Upload to Amazon S3
          command: aws s3 cp ./build/MagicCap-linux-x64/magiccap-linux.zip s3://s3.magiccap.me/upgrades/$CIRCLE_TAG/
  # Creates a build for Linux and uploads it to Amazon S3.

  macbuild:
    macos:
      node: "10"
      xcode: "10.0.0"
    working_directory: ~/repo/magiccap
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          key: mac-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install MagicCap's dependencies
          command: npm i
      - save_cache:
          key: mac-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - "node_modules"
      - run:
          name: Build MagicCap for macOS
          command: npm run maccompile
      - run:
          name: Rename the macOS dmg file
          command: mv ./build/MagicCap.dmg ./build/magiccap-mac.dmg
      - run:
          name: Create a MagicCap macOS zip
          command: cd ./build/MagicCap-darwin-x64 && zip -r ./magiccap-mac.zip . && cd ../..
      - run:
          name: Install the AWS CLI.
          command: brew install awscli
      - run:
          name: Upload magiccap-mac.zip to Amazon S3
          command: aws s3 cp ./build/MagicCap-darwin-x64/magiccap-mac.zip s3://s3.magiccap.me/upgrades/$CIRCLE_TAG/
      - run:
          name: Upload magiccap-mac.dmg to Amazon S3
          command: aws s3 cp ./build/magiccap-mac.dmg s3://s3.magiccap.me/upgrades/$CIRCLE_TAG/
  # Creates a build for macOS and uploads it to Amazon S3.

  final_deploy:
    docker:
      - image: circleci/golang:1.8
    steps:
      - run:
          name: Install the AWS CLI.
          command: apt install -y python-pip && pip install awscli
      - run:
          name: Pull release from Amazon S3
          command: aws s3 sync ./current/ s3://s3.magiccap.me/upgrades/$CIRCLE_TAG/
      - run:
          name: Create GitHub release
          command: go get github.com/tcnksm/ghr && ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ./current/
      - run:
          name: Deploy to the MagicCap API
          command: curl https://api.magiccap.me/travis/new/$MAGICCAP_API_KEY/$CIRCLE_TAG
  # Handles the final deploy.

workflows:
  version: 2
  test-build-and-deploy:
    jobs:
      - test
      - macbuild:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - linuxbuild:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - final_deploy:
          requires:
            - macbuild
            - linuxbuild
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
# Handles the workflow.
